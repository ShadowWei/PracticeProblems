/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        ListNode cNode = null;

        int rem = 0; 
        Boolean extra = false; 
            
        while(l1 != null || l2 != null){
            int item1; 
            int item2;
            int item3; 

            if(l1 == null){
                item1 = 0;                 
            }
            else{
                item1 = l1.val; 
            }
            
            if(l2 == null){
                item2 = 0; 
            }
            else{
                item2 = l2.val; 
            }
            
            item3 = item1 + item2 + rem; 
            
            System.out.println(item3); 
            
            if(cNode == null && item3 < 10){
                 cNode = new ListNode(item3); 
            }
            else if(item3 >= 10){
                rem = item3/10;
                int left = item3%10;
                extra = true; 
                cNode = new ListNode(left, cNode); 
            }
            else{
                extra = false; 
                rem = 0; 
                cNode = new ListNode(item3, cNode); 
            }
            
            if(l1 != null && l1.next != null){
                l1 = l1.next; 
            }
            else{
                l1 = null; 
            }
            
            if(l2 != null && l2.next != null){
                l2 = l2.next; 
            }
            else{
                l2 = null; 
            }
        }
        
        if(extra){
            cNode = new ListNode(rem, cNode); 
        }
        
        
        //Reverse list
        ListNode prev = null; 
        ListNode curr = cNode;
        ListNode next = null; 
        
        while(curr != null){
            next = curr.next; 
            curr.next = prev; 
            prev = curr; 
            curr = next;             
        }        
        ListNode fNode = prev; 
        
        return fNode; 
        
        
        
        //First Version 
//         //Adds all the numbers in link 1
//         int count1 = 0; 
//         BigInteger num1 = new BigInteger("0"); 
//         while(l1 != null){
//             count1++; 
//             num1 = num1 + l1.val * (BigInteger)(Math.pow(10, count1-1)); 
//             l1 = l1.next; 
//         }
        
//         //Adds all the numbers in link 2 
//         int count2 = 0; 
//         BigInteger num2 = 0; 
//         while(l2 != null){
//             count2++; 
//             num2 = num2 + l2.val * (BigInteger)(Math.pow(10, count2-1)); 
//             l2 = l2.next; 
//         }
        
//         //Adds the two numbers from link 1 and 2
//         BigInteger finalNum = (num1 + num2); 
        
//         String s = Long.toString(finalNum); 
        
//         for(int i = 0; i < s.length(); i++){
//             // System.out.println(s.charAt(i)); 
            
//             int temp = Character.getNumericValue(s.charAt(i)); 
            
//             // System.out.println(temp); 
            
//             if(fNode == null){
//                 fNode = new ListNode(temp); 
//             }
//             else{            
//                 fNode = new ListNode(temp, fNode); 
//             }
//         }
        
    }
}
